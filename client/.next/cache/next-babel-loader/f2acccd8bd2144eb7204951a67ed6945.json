{"ast":null,"code":"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport jwtDecode from \"jwt-decode\";\nexport class AuthToken {\n  constructor(token) {\n    this.token = token;\n    _defineProperty(this, \"decodedToken\", void 0);\n    // we are going to default to an expired decodedToken\n    this.decodedToken = {\n      id: 0,\n      exp: 0,\n      iat: 0\n    };\n\n    // then try and decode the jwt using jwt-decode\n    try {\n      if (token) this.decodedToken = jwtDecode(token);\n    } catch (e) {}\n  }\n  get authorizationString() {\n    return `Bearer ${this.token}`;\n  }\n  get expiresAt() {\n    return new Date(this.decodedToken.exp * 1000);\n  }\n  get isExpired() {\n    return new Date() > this.expiresAt;\n  }\n  get isValid() {\n    return !this.isExpired;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}