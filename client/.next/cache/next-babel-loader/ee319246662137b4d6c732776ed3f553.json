{"ast":null,"code":"var __jsx = React.createElement;\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport React, { Component } from \"react\";\nexport class ErrorBoundary extends Component {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"state\", {\n      error: null,\n      eventId: null\n    });\n  }\n  componentDidCatch(error, errorInfo) {\n    this.setState({\n      error\n    });\n    console.log(error, errorInfo);\n  }\n  render() {\n    if (this.state.error) {\n      return __jsx(\"div\", null, \"Error\");\n    } else {\n      return this.props.children;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}