{"ast":null,"code":"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { create } from \"apisauce\";\nimport { DEFAULT_API_CONFIG } from \"./api-config\";\n\n/**\n * Manages all requests to the API.\n */\nexport class Api {\n  /**\n   * Creates the api.\n   *\n   * @param config The configuration to use.\n   */\n  constructor(config = DEFAULT_API_CONFIG) {\n    /**\n     * The underlying apisauce instance which performs the requests.\n     */\n    _defineProperty(this, \"apisauce\", void 0);\n    /**\n     * Configurable options.\n     */\n    _defineProperty(this, \"config\", void 0);\n    this.config = config;\n  }\n\n  /**\n   * Sets up the API.  This will be called during the bootup\n   * sequence and will happen before the first React component\n   * is mounted.\n   *\n   * Be as quick as possible in here.\n   */\n  setup() {\n    // construct the apisauce instance\n    this.apisauce = create({\n      baseURL: this.config.url,\n      timeout: this.config.timeout,\n      headers: {\n        Accept: \"application/json\"\n      }\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}