{"ast":null,"code":"import { Api } from \"./api\";\nimport { getGeneralApiProblem } from \"./api/api-problem\";\nexport class AuthApi extends Api {\n  async login(email, password) {\n    const response = await this.apisauce.post(\"/api/v1/auth/login\", {\n      email: email,\n      password: password\n    });\n    if (!response.ok) {\n      const problem = getGeneralApiProblem(response);\n      if (problem) return problem;\n    }\n    try {\n      const data = response.data;\n      return {\n        kind: \"ok\",\n        token: data.auth_token,\n        user: data.user\n      };\n    } catch {\n      return {\n        kind: \"bad-data\"\n      };\n    }\n  }\n  async fetchStatus(token) {\n    this.apisauce.setHeader(\"Authorization\", `Bearer ${token}`);\n    const response = await this.apisauce.get(\"/api/v1/auth/status\");\n    if (!response.ok) {\n      const problem = getGeneralApiProblem(response);\n      if (problem) return problem;\n    }\n    try {\n      const data = response.data;\n      return {\n        kind: \"ok\",\n        user: data.user\n      };\n    } catch {\n      return {\n        kind: \"bad-data\"\n      };\n    }\n  }\n  async checkToken(token) {\n    this.apisauce.setHeader(\"Authorization\", `Bearer ${token}`);\n    const response = await this.apisauce.get(\"/api/v1/auth/ping\");\n    if (!response.ok) {\n      const problem = getGeneralApiProblem(response);\n      if (problem) return problem;\n    }\n    try {\n      const data = response.data;\n      return {\n        kind: \"ok\",\n        message: data.message\n      };\n    } catch {\n      return {\n        kind: \"bad-data\"\n      };\n    }\n  }\n  async register(firstName, lastName, email, password) {\n    const response = await this.apisauce.post(\"/api/v1/auth/nn\", {\n      firstName: firstName,\n      lastName: lastName,\n      email: email,\n      password: password\n    });\n    if (!response.ok) {\n      const problem = getGeneralApiProblem(response);\n      if (problem) return problem;\n    }\n    try {\n      const data = response.data;\n      return {\n        kind: \"ok\",\n        token: data.auth_token,\n        user: data.user\n      };\n    } catch {\n      return {\n        kind: \"bad-data\"\n      };\n    }\n  }\n}","map":{"version":3,"names":["Api","getGeneralApiProblem","AuthApi","login","email","password","response","apisauce","post","ok","problem","data","kind","token","auth_token","user","fetchStatus","setHeader","get","checkToken","message","register","firstName","lastName"],"sources":["/usr/src/app/services/auth.ts"],"sourcesContent":["import { Api } from \"./api\";\r\nimport { ApiResponse } from \"apisauce\";\r\nimport { GeneralApiProblem, getGeneralApiProblem } from \"./api/api-problem\";\r\nimport { User } from \"./types\";\r\n\r\nexport type AuthResponse =\r\n  | { kind: \"ok\"; token: string; user: User }\r\n  | GeneralApiProblem;\r\nexport type UserStatusResponse = { kind: \"ok\"; user: User } | GeneralApiProblem;\r\nexport type GeneralStatusResponse =\r\n  | { kind: \"ok\"; message: string }\r\n  | GeneralApiProblem;\r\n\r\nexport class AuthApi extends Api {\r\n  async login(email: string, password: string): Promise<AuthResponse> {\r\n    const response: ApiResponse<any> = await this.apisauce.post(\r\n      \"/api/v1/auth/login\",\r\n      {\r\n        email: email,\r\n        password: password,\r\n      }\r\n    );\r\n\r\n    if (!response.ok) {\r\n      const problem = getGeneralApiProblem(response);\r\n      if (problem) return problem;\r\n    }\r\n\r\n    try {\r\n      const data = response.data;\r\n      return { kind: \"ok\", token: data.auth_token, user: data.user };\r\n    } catch {\r\n      return { kind: \"bad-data\" };\r\n    }\r\n  }\r\n\r\n  async fetchStatus(token: string): Promise<UserStatusResponse> {\r\n    this.apisauce.setHeader(\"Authorization\", `Bearer ${token}`);\r\n    const response: ApiResponse<any> = await this.apisauce.get(\r\n      \"/api/v1/auth/status\"\r\n    );\r\n\r\n    if (!response.ok) {\r\n      const problem = getGeneralApiProblem(response);\r\n      if (problem) return problem;\r\n    }\r\n\r\n    try {\r\n      const data = response.data;\r\n      return { kind: \"ok\", user: data.user };\r\n    } catch {\r\n      return { kind: \"bad-data\" };\r\n    }\r\n  }\r\n\r\n  async checkToken(token: string): Promise<GeneralStatusResponse> {\r\n    this.apisauce.setHeader(\"Authorization\", `Bearer ${token}`);\r\n    const response: ApiResponse<any> = await this.apisauce.get(\r\n      \"/api/v1/auth/ping\"\r\n    );\r\n\r\n    if (!response.ok) {\r\n      const problem = getGeneralApiProblem(response);\r\n      if (problem) return problem;\r\n    }\r\n\r\n    try {\r\n      const data = response.data;\r\n      return { kind: \"ok\", message: data.message };\r\n    } catch {\r\n      return { kind: \"bad-data\" };\r\n    }\r\n  }\r\n  async register(firstName: string, lastName: string, email: string, password: string): Promise<AuthResponse> {\r\n    const response: ApiResponse<any> = await this.apisauce.post(\r\n      \"/api/v1/auth/nn\",\r\n      {\r\n        firstName: firstName,\r\n        lastName: lastName,\r\n        email: email,\r\n        password: password,\r\n      }\r\n    );\r\n  \r\n    if (!response.ok) {\r\n      const problem = getGeneralApiProblem(response);\r\n      if (problem) return problem;\r\n    }\r\n  \r\n    try {\r\n      const data = response.data;\r\n      return { kind: \"ok\", token: data.auth_token, user: data.user };\r\n    } catch {\r\n      return { kind: \"bad-data\" };\r\n    }\r\n  }  \r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}