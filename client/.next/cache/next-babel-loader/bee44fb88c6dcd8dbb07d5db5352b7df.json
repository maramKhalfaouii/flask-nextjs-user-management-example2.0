{"ast":null,"code":"var _s = $RefreshSig$(),\n    _jsxFileName = \"/home/maram/Desktop/1testpfa11/flask-nextjs-user-management-example2.0/client/utils/auth/auth-hook.tsx\";\n\nvar __jsx = React.createElement;\nimport React, { useContext, createContext } from \"react\";\n// @ts-ignore\nexport var authContext = /*#__PURE__*/createContext(null);\n// Hook for child components to get the auth object ...\n// ... and re-render when it changes.\nexport var useAuth = function useAuth() {\n  _s();\n\n  return useContext(authContext);\n}; // Provider component that wraps your app and makes auth object ...\n// ... available to any child component that calls useAuth().\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ProvideAuth(props) {\n  return __jsx(authContext.Provider, {\n    value: props.auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, props.children);\n}\n_c = ProvideAuth;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProvideAuth\");","map":{"version":3,"sources":["/home/maram/Desktop/1testpfa11/flask-nextjs-user-management-example2.0/client/utils/auth/auth-hook.tsx"],"names":["React","useContext","createContext","authContext","useAuth","ProvideAuth","props","auth","children"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,aAA5B,QAAiD,OAAjD;AAGA;AACA,OAAO,IAAMC,WAAW,gBAAGD,aAAa,CAAmB,IAAnB,CAAjC;AAOP;AACA;AACA,OAAO,IAAME,OAAO,GAAG,SAAVA,OAAU,GAAwB;AAAA;;AAC7C,SAAOH,UAAU,CAACE,WAAD,CAAjB;AACD,CAFM,C,CAIP;AACA;;GALaC,O;;AAMb,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA+C;AACpD,SACE,MAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEA,KAAK,CAACC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KAAK,CAACE,QADT,CADF;AAKD;KANeH,W","sourcesContent":["import React, { useContext, createContext } from \"react\";\nimport { AuthToken } from \"./auth-token\";\n\n// @ts-ignore\nexport const authContext = createContext<AuthToken | null>(null);\n\ntype ProviderAuthProps = {\n  auth: AuthToken;\n  children: React.ReactNode | React.ReactChildren;\n};\n\n// Hook for child components to get the auth object ...\n// ... and re-render when it changes.\nexport const useAuth = (): AuthToken | null => {\n  return useContext(authContext);\n};\n\n// Provider component that wraps your app and makes auth object ...\n// ... available to any child component that calls useAuth().\nexport function ProvideAuth(props: ProviderAuthProps) {\n  return (\n    <authContext.Provider value={props.auth}>\n      {props.children}\n    </authContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}