{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport jwtDecode from \"jwt-decode\";\nexport var AuthToken = /*#__PURE__*/function () {\n  function AuthToken(token) {\n    _classCallCheck(this, AuthToken);\n\n    this.token = token;\n\n    _defineProperty(this, \"decodedToken\", void 0);\n\n    // we are going to default to an expired decodedToken\n    this.decodedToken = {\n      id: 0,\n      exp: 0,\n      iat: 0\n    }; // then try and decode the jwt using jwt-decode\n\n    try {\n      if (token) this.decodedToken = jwtDecode(token);\n    } catch (e) {}\n  }\n\n  return _createClass(AuthToken, [{\n    key: \"authorizationString\",\n    get: function get() {\n      return \"Bearer \".concat(this.token);\n    }\n  }, {\n    key: \"expiresAt\",\n    get: function get() {\n      return new Date(this.decodedToken.exp * 1000);\n    }\n  }, {\n    key: \"isExpired\",\n    get: function get() {\n      return new Date() > this.expiresAt;\n    }\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return !this.isExpired;\n    }\n  }]);\n}();","map":{"version":3,"sources":["/home/maram/Desktop/1testpfa11/flask-nextjs-user-management-example2.0/client/utils/auth/auth-token.ts"],"names":["jwtDecode","AuthToken","token","decodedToken","id","exp","iat","e","Date","expiresAt","isExpired"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AAQA,WAAaC,SAAb;AAGE,qBAAqBC,KAArB,EAAqC;AAAA;;AAAA,SAAhBA,KAAgB,GAAhBA,KAAgB;;AAAA;;AACnC;AACA,SAAKC,YAAL,GAAoB;AAAEC,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,GAAG,EAAE,CAAd;AAAiBC,MAAAA,GAAG,EAAE;AAAtB,KAApB,CAFmC,CAInC;;AACA,QAAI;AACF,UAAIJ,KAAJ,EAAW,KAAKC,YAAL,GAAoBH,SAAS,CAACE,KAAD,CAA7B;AACZ,KAFD,CAEE,OAAOK,CAAP,EAAU,CAAE;AACf;;AAXH;AAAA;AAAA,SAaE,eAA0B;AACxB,8BAAiB,KAAKL,KAAtB;AACD;AAfH;AAAA;AAAA,SAiBE,eAAsB;AACpB,aAAO,IAAIM,IAAJ,CAAS,KAAKL,YAAL,CAAkBE,GAAlB,GAAwB,IAAjC,CAAP;AACD;AAnBH;AAAA;AAAA,SAqBE,eAAyB;AACvB,aAAO,IAAIG,IAAJ,KAAa,KAAKC,SAAzB;AACD;AAvBH;AAAA;AAAA,SAyBE,eAAuB;AACrB,aAAO,CAAC,KAAKC,SAAb;AACD;AA3BH;AAAA","sourcesContent":["import jwtDecode from \"jwt-decode\";\n\nexport type DecodedToken = {\n  readonly exp: number;\n  readonly iat: number;\n  readonly id: number;\n};\n\nexport class AuthToken {\n  readonly decodedToken: DecodedToken;\n\n  constructor(readonly token?: string) {\n    // we are going to default to an expired decodedToken\n    this.decodedToken = { id: 0, exp: 0, iat: 0 };\n\n    // then try and decode the jwt using jwt-decode\n    try {\n      if (token) this.decodedToken = jwtDecode(token);\n    } catch (e) {}\n  }\n\n  get authorizationString() {\n    return `Bearer ${this.token}`;\n  }\n\n  get expiresAt(): Date {\n    return new Date(this.decodedToken.exp * 1000);\n  }\n\n  get isExpired(): boolean {\n    return new Date() > this.expiresAt;\n  }\n\n  get isValid(): boolean {\n    return !this.isExpired;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}